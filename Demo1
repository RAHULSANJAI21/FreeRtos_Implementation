#include "FreeRTOS.h"
#include "task.h"
#include "stm32f4xx.h"

void Task1(void *pvParameters) {
    while(1) {
        // Toggle LED or simple task
    	USART2_SendString("Task1\r\n");
    	 vTaskDelay(pdMS_TO_TICKS(1000)); // 1000 ms delay
    }
}

void Task2(void *pvParameters) {
    while(1) {
        // Another simple task
    	USART2_SendString("Task2\r\n");
    	 vTaskDelay(pdMS_TO_TICKS(500)); // 1000 ms delay
    }
}
void USART_INIT() {
    // Enable clocks
	RCC->CR |=(1<<0);
    RCC->AHB1ENR |= (1 << 2);  // GPIOC clock enable
    RCC->APB2ENR |= (1 << 5);   // USART6 clock enable

    // PC6 as TX (AF mode)
    GPIOC->MODER &= ~(3 << (6 * 2));
    GPIOC->MODER |= (2 << (6 * 2));
    GPIOC->AFR[0] |= (8 << (6 * 4));

    // PC7 as RX (AF mode)
    GPIOC->MODER &= ~(3 << (7 * 2));
    GPIOC->MODER |= (2 << (7 * 2));
    GPIOC->AFR[0] |= (8 << (7 * 4));

    // Configure USART6
    USART6->CR1 |= (1 << 13);
    USART6->CR1 &= ~(1 << 12);// Enable USART
    USART6->CR2 &= ~(3 << 12);
    USART6->BRR = (16000000 + (9600/2)) / 9600; ; // Baud rate 9600
          // 8 data bits
    USART6->CR1 |= (1 << 3);
   // USART6->DR|=(1<<0);// Enable transmitter

}

void USART2_Write(char ch) {
    // Wait until TXE (Transmit data register empty) is set
    while (!(USART6->SR & (1 << 7)));
    USART6->DR = ch;
}

void USART2_SendString(char *str) {
    while (*str) {
        USART2_Write(*str++);
    }
}

int main() {
    USART_INIT();
    xTaskCreate(Task1, "Task1", 128, NULL, 1, NULL);

    xTaskCreate(Task2, "Task2", 128, NULL, 1, NULL);

    vTaskStartScheduler(); // Start the scheduler

    while (1);
}
